/*
 * expert.ai Natural Language API
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * OpenAPI spec version: v2
 * Contact: api.inquiry@expert.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package my.rest.api.nl.bean;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * Item or chain of items expressing sentiment
 */
public class SentimentItem {

  private String lemma = null;

  private Long syncon = null;

  private Float sentiment = null;

  private List<SentimentItem> items = null;

  public SentimentItem lemma(String lemma) {
    this.lemma = lemma;
    return this;
  }

   /**
   * Lemma
   * @return lemma
  **/
  public String getLemma() {
    return lemma;
  }

  public void setLemma(String lemma) {
    this.lemma = lemma;
  }

  public SentimentItem syncon(Long syncon) {
    this.syncon = syncon;
    return this;
  }

   /**
   * ID used to look up Knowledge Graph data in the &#x60;knowledge&#x60; array
   * @return syncon
  **/
  public Long getSyncon() {
    return syncon;
  }

  public void setSyncon(Long syncon) {
    this.syncon = syncon;
  }

  public SentimentItem sentiment(Float sentiment) {
    this.sentiment = sentiment;
    return this;
  }

   /**
   * Item/chain sentiment score
   * @return sentiment
  **/
  public Float getSentiment() {
    return sentiment;
  }

  public void setSentiment(Float sentiment) {
    this.sentiment = sentiment;
  }

  public SentimentItem items(List<SentimentItem> items) {
    this.items = items;
    return this;
  }

  public SentimentItem addItemsItem(SentimentItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<SentimentItem>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Items expressing sentiment
   * @return items
  **/
  public List<SentimentItem> getItems() {
    return items;
  }

  public void setItems(List<SentimentItem> items) {
    this.items = items;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SentimentItem sentimentItem = (SentimentItem) o;
    return Objects.equals(this.lemma, sentimentItem.lemma) &&
        Objects.equals(this.syncon, sentimentItem.syncon) &&
        Objects.equals(this.sentiment, sentimentItem.sentiment) &&
        Objects.equals(this.items, sentimentItem.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lemma, syncon, sentiment, items);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SentimentItem {\n");
    
    sb.append("    lemma: ").append(toIndentedString(lemma)).append("\n");
    sb.append("    syncon: ").append(toIndentedString(syncon)).append("\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
