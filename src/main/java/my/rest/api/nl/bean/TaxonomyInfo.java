/*
 * expert.ai Natural Language API
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * OpenAPI spec version: v2
 * Contact: api.inquiry@expert.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package my.rest.api.nl.bean;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * Summary information about a taxonomy
 */
public class TaxonomyInfo {
  private String name = null;

  private String description = null;

  private String contract = null;

  private List<LanguageInfo> languages = null;

  public TaxonomyInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Taxonomy name
   * @return name
  **/
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TaxonomyInfo description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Taxonomy description
   * @return description
  **/
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public TaxonomyInfo contract(String contract) {
    this.contract = contract;
    return this;
  }

   /**
   * OpenAPI document describing extra ways to use the taxonomy and their outputs
   * @return contract
  **/
  public String getContract() {
    return contract;
  }

  public void setContract(String contract) {
    this.contract = contract;
  }

  public TaxonomyInfo languages(List<LanguageInfo> languages) {
    this.languages = languages;
    return this;
  }

  public TaxonomyInfo addLanguagesItem(LanguageInfo languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<LanguageInfo>();
    }
    this.languages.add(languagesItem);
    return this;
  }

   /**
   * Supported languages
   * @return languages
  **/
  public List<LanguageInfo> getLanguages() {
    return languages;
  }

  public void setLanguages(List<LanguageInfo> languages) {
    this.languages = languages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxonomyInfo taxonomyInfo = (TaxonomyInfo) o;
    return Objects.equals(this.name, taxonomyInfo.name) &&
        Objects.equals(this.description, taxonomyInfo.description) &&
        Objects.equals(this.contract, taxonomyInfo.contract) &&
        Objects.equals(this.languages, taxonomyInfo.languages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, contract, languages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxonomyInfo {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
