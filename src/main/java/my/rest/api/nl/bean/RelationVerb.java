/*
 * expert.ai Natural Language API
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * OpenAPI spec version: v2
 * Contact: api.inquiry@expert.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package my.rest.api.nl.bean;

import java.util.Objects;
/**
 * Verb of a relation
 */
public class RelationVerb {
  private String text = null;

  private String lemma = null;

  private Long syncon = null;

  private String type = null;

  private Long phrase = null;

  private Long relevance = null;

  public RelationVerb text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Verb text
   * @return text
  **/
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public RelationVerb lemma(String lemma) {
    this.lemma = lemma;
    return this;
  }

   /**
   * Lemma
   * @return lemma
  **/
  public String getLemma() {
    return lemma;
  }

  public void setLemma(String lemma) {
    this.lemma = lemma;
  }

  public RelationVerb syncon(Long syncon) {
    this.syncon = syncon;
    return this;
  }

   /**
   * ID used to look up Knowledge Graph data in the &#x60;knowledge&#x60; array
   * @return syncon
  **/
  public Long getSyncon() {
    return syncon;
  }

  public void setSyncon(Long syncon) {
    this.syncon = syncon;
  }

  public RelationVerb type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Type
   * @return type
  **/
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public RelationVerb phrase(Long phrase) {
    this.phrase = phrase;
    return this;
  }

   /**
   * Phrase index in the &#x60;phrases&#x60; array
   * @return phrase
  **/
  public Long getPhrase() {
    return phrase;
  }

  public void setPhrase(Long phrase) {
    this.phrase = phrase;
  }

  public RelationVerb relevance(Long relevance) {
    this.relevance = relevance;
    return this;
  }

   /**
   * Relevance
   * @return relevance
  **/
  public Long getRelevance() {
    return relevance;
  }

  public void setRelevance(Long relevance) {
    this.relevance = relevance;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationVerb relationVerb = (RelationVerb) o;
    return Objects.equals(this.text, relationVerb.text) &&
        Objects.equals(this.lemma, relationVerb.lemma) &&
        Objects.equals(this.syncon, relationVerb.syncon) &&
        Objects.equals(this.type, relationVerb.type) &&
        Objects.equals(this.phrase, relationVerb.phrase) &&
        Objects.equals(this.relevance, relationVerb.relevance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, lemma, syncon, type, phrase, relevance);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationVerb {\n");
    
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    lemma: ").append(toIndentedString(lemma)).append("\n");
    sb.append("    syncon: ").append(toIndentedString(syncon)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    phrase: ").append(toIndentedString(phrase)).append("\n");
    sb.append("    relevance: ").append(toIndentedString(relevance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
