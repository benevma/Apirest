/*
 * expert.ai Natural Language API
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * OpenAPI spec version: v2
 * Contact: api.inquiry@expert.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package my.rest.api.nl.bean;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * Inferred attribute
 */
public class InferredAttribute {

  private String attribute = null;

  private String lemma = null;

  private Long syncon = null;

  private String type = null;

  private List<InferredAttribute> attributes = null;

  public InferredAttribute attribute(String attribute) {
    this.attribute = attribute;
    return this;
  }

   /**
   * Attribute name
   * @return attribute
  **/
  public String getAttribute() {
    return attribute;
  }

  public void setAttribute(String attribute) {
    this.attribute = attribute;
  }

  public InferredAttribute lemma(String lemma) {
    this.lemma = lemma;
    return this;
  }

   /**
   * Lemma
   * @return lemma
  **/
  public String getLemma() {
    return lemma;
  }

  public void setLemma(String lemma) {
    this.lemma = lemma;
  }

  public InferredAttribute syncon(Long syncon) {
    this.syncon = syncon;
    return this;
  }

   /**
   * ID used to look up Knowledge Graph data in the &#x60;knowledge&#x60; array
   * @return syncon
  **/
  public Long getSyncon() {
    return syncon;
  }

  public void setSyncon(Long syncon) {
    this.syncon = syncon;
  }

  public InferredAttribute type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Attribute type
   * @return type
  **/
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public InferredAttribute attributes(List<InferredAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public InferredAttribute addAttributesItem(InferredAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<InferredAttribute>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Attribute&#x27;s attributes
   * @return attributes
  **/
  public List<InferredAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<InferredAttribute> attributes) {
    this.attributes = attributes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InferredAttribute inferredAttribute = (InferredAttribute) o;
    return Objects.equals(this.attribute, inferredAttribute.attribute) &&
        Objects.equals(this.lemma, inferredAttribute.lemma) &&
        Objects.equals(this.syncon, inferredAttribute.syncon) &&
        Objects.equals(this.type, inferredAttribute.type) &&
        Objects.equals(this.attributes, inferredAttribute.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribute, lemma, syncon, type, attributes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InferredAttribute {\n");
    
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    lemma: ").append(toIndentedString(lemma)).append("\n");
    sb.append("    syncon: ").append(toIndentedString(syncon)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
