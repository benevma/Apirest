/*
 * expert.ai Natural Language API
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * OpenAPI spec version: v2
 * Contact: api.inquiry@expert.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package my.rest.api.nl.bean;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * Knowledge Graph data for a syncon
 */
public class KnowledgeEntry {

  private Long syncon = null;

  private String label = null;

  private List<Property> properties = null;

  public KnowledgeEntry syncon(Long syncon) {
    this.syncon = syncon;
    return this;
  }

   /**
   * Syncon ID
   * @return syncon
  **/
  public Long getSyncon() {
    return syncon;
  }

  public void setSyncon(Long syncon) {
    this.syncon = syncon;
  }

  public KnowledgeEntry label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Textual rendering of the general conceptual category for the token in the Knowledge Graph
   * @return label
  **/
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public KnowledgeEntry properties(List<Property> properties) {
    this.properties = properties;
    return this;
  }

  public KnowledgeEntry addPropertiesItem(Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<Property>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Syncon extended properties
   * @return properties
  **/
  public List<Property> getProperties() {
    return properties;
  }

  public void setProperties(List<Property> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KnowledgeEntry knowledgeEntry = (KnowledgeEntry) o;
    return Objects.equals(this.syncon, knowledgeEntry.syncon) &&
        Objects.equals(this.label, knowledgeEntry.label) &&
        Objects.equals(this.properties, knowledgeEntry.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(syncon, label, properties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KnowledgeEntry {\n");
    
    sb.append("    syncon: ").append(toIndentedString(syncon)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
