/*
 * expert.ai Natural Language API
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * OpenAPI spec version: v2
 * Contact: api.inquiry@expert.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package my.rest.api.nl.bean;

import java.util.Objects;
/**
 * Dependency info
 */
public class Dependency {

  private Long id = null;


  private Long head = null;


  private String label = null;

  public Dependency id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Zero-based cardinal number of the token
   * @return id
  **/

  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Dependency head(Long head) {
    this.head = head;
    return this;
  }

   /**
   * Number of the head token
   * @return head
  **/

  public Long getHead() {
    return head;
  }

  public void setHead(Long head) {
    this.head = head;
  }

  public Dependency label(String label) {
    this.label = label;
    return this;
  }

   /**
   * (&lt;a href&#x3D;&#x27;https://universaldependencies.org/u/dep/#universal-dependency-relations&#x27; target&#x3D;&#x27;_blank&#x27;&gt;Dependency relation&lt;/a&gt; between the token and the head token
   * @return label
  **/
   public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dependency dependency = (Dependency) o;
    return Objects.equals(this.id, dependency.id) &&
        Objects.equals(this.head, dependency.head) &&
        Objects.equals(this.label, dependency.label);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, head, label);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dependency {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    head: ").append(toIndentedString(head)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
