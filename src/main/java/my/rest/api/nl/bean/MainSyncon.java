/*
 * expert.ai Natural Language API
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * OpenAPI spec version: v2
 * Contact: api.inquiry@expert.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package my.rest.api.nl.bean;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * Main syncon info
 */
public class MainSyncon {
  private Long syncon = null;

  private String lemma = null;

  private Float score = null;

  private List<DocumentPosition> positions = null;

  public MainSyncon syncon(Long syncon) {
    this.syncon = syncon;
    return this;
  }

   /**
   * ID used to look up Knowledge Graph data in the &#x60;knowledge&#x60; array
   * @return syncon
  **/
  public Long getSyncon() {
    return syncon;
  }

  public void setSyncon(Long syncon) {
    this.syncon = syncon;
  }

  public MainSyncon lemma(String lemma) {
    this.lemma = lemma;
    return this;
  }

   /**
   * Lemma
   * @return lemma
  **/
  public String getLemma() {
    return lemma;
  }

  public void setLemma(String lemma) {
    this.lemma = lemma;
  }

  public MainSyncon score(Float score) {
    this.score = score;
    return this;
  }

   /**
   * Score assigned to the syncon to represent its relevance
   * @return score
  **/
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }

  public MainSyncon positions(List<DocumentPosition> positions) {
    this.positions = positions;
    return this;
  }

  public MainSyncon addPositionsItem(DocumentPosition positionsItem) {
    if (this.positions == null) {
      this.positions = new ArrayList<DocumentPosition>();
    }
    this.positions.add(positionsItem);
    return this;
  }

   /**
   * Positions of the expressions of the syncon
   * @return positions
  **/
  public List<DocumentPosition> getPositions() {
    return positions;
  }

  public void setPositions(List<DocumentPosition> positions) {
    this.positions = positions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MainSyncon mainSyncon = (MainSyncon) o;
    return Objects.equals(this.syncon, mainSyncon.syncon) &&
        Objects.equals(this.lemma, mainSyncon.lemma) &&
        Objects.equals(this.score, mainSyncon.score) &&
        Objects.equals(this.positions, mainSyncon.positions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(syncon, lemma, score, positions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MainSyncon {\n");
    
    sb.append("    syncon: ").append(toIndentedString(syncon)).append("\n");
    sb.append("    lemma: ").append(toIndentedString(lemma)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    positions: ").append(toIndentedString(positions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
