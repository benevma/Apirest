/*
 * expert.ai Natural Language API
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * OpenAPI spec version: v2
 * Contact: api.inquiry@expert.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package my.rest.api.nl.bean;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * Sentiment
 */

public class AnalyzeDocumentSentiment {

  private BigDecimal overall = null;


  private Float negativity = null;


  private Float positivity = null;


  private List<SentimentItem> items = null;

  public AnalyzeDocumentSentiment overall(BigDecimal overall) {
    this.overall = overall;
    return this;
  }

   /**
   * Overall text sentiment score
   * @return overall
  **/

  public BigDecimal getOverall() {
    return overall;
  }

  public void setOverall(BigDecimal overall) {
    this.overall = overall;
  }

  public AnalyzeDocumentSentiment negativity(Float negativity) {
    this.negativity = negativity;
    return this;
  }

   /**
   * Text negativity
   * @return negativity
  **/

  public Float getNegativity() {
    return negativity;
  }

  public void setNegativity(Float negativity) {
    this.negativity = negativity;
  }

  public AnalyzeDocumentSentiment positivity(Float positivity) {
    this.positivity = positivity;
    return this;
  }

   /**
   * Text positivity
   * @return positivity
  **/

  public Float getPositivity() {
    return positivity;
  }

  public void setPositivity(Float positivity) {
    this.positivity = positivity;
  }

  public AnalyzeDocumentSentiment items(List<SentimentItem> items) {
    this.items = items;
    return this;
  }

  public AnalyzeDocumentSentiment addItemsItem(SentimentItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<SentimentItem>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Items expressing sentiment
   * @return items
  **/

  public List<SentimentItem> getItems() {
    return items;
  }

  public void setItems(List<SentimentItem> items) {
    this.items = items;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzeDocumentSentiment analyzeDocumentSentiment = (AnalyzeDocumentSentiment) o;
    return Objects.equals(this.overall, analyzeDocumentSentiment.overall) &&
        Objects.equals(this.negativity, analyzeDocumentSentiment.negativity) &&
        Objects.equals(this.positivity, analyzeDocumentSentiment.positivity) &&
        Objects.equals(this.items, analyzeDocumentSentiment.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(overall, negativity, positivity, items);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzeDocumentSentiment {\n");
    
    sb.append("    overall: ").append(toIndentedString(overall)).append("\n");
    sb.append("    negativity: ").append(toIndentedString(negativity)).append("\n");
    sb.append("    positivity: ").append(toIndentedString(positivity)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
