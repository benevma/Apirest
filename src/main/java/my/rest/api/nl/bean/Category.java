/*
 * expert.ai Natural Language API
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * OpenAPI spec version: v2
 * Contact: api.inquiry@expert.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package my.rest.api.nl.bean;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * Category
 */

public class Category {

  private String id = null;

  private String label = null;

  private List<String> hierarchy = null;

  private Integer score = null;

  private Boolean winner = null;

  private String namespace = null;

  private Float frequency = null;

  private List<DocumentPosition> positions = null;

  public Category id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Category ID
   * @return id
  **/
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Category label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Category label
   * @return label
  **/
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public Category hierarchy(List<String> hierarchy) {
    this.hierarchy = hierarchy;
    return this;
  }

  public Category addHierarchyItem(String hierarchyItem) {
    if (this.hierarchy == null) {
      this.hierarchy = new ArrayList<String>();
    }
    this.hierarchy.add(hierarchyItem);
    return this;
  }

   /**
   * Hierarchical path
   * @return hierarchy
  **/
  public List<String> getHierarchy() {
    return hierarchy;
  }

  public void setHierarchy(List<String> hierarchy) {
    this.hierarchy = hierarchy;
  }

  public Category score(Integer score) {
    this.score = score;
    return this;
  }

   /**
   * Score assigned to the category to represent its relevance
   * @return score
  **/
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }

  public Category winner(Boolean winner) {
    this.winner = winner;
    return this;
  }

   /**
   * True if the category is deemed particularly relevant
   * @return winner
  **/
  public Boolean isWinner() {
    return winner;
  }

  public void setWinner(Boolean winner) {
    this.winner = winner;
  }

  public Category namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

   /**
   * Name of the software package containing the reference taxonomy
   * @return namespace
  **/
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }

  public Category frequency(Float frequency) {
    this.frequency = frequency;
    return this;
  }

   /**
   * Score expressed as a percentage of the sum of the scores of all the candidate categories, winners and not (see the **score** property)
   * @return frequency
  **/
  public Float getFrequency() {
    return frequency;
  }

  public void setFrequency(Float frequency) {
    this.frequency = frequency;
  }

  public Category positions(List<DocumentPosition> positions) {
    this.positions = positions;
    return this;
  }

  public Category addPositionsItem(DocumentPosition positionsItem) {
    if (this.positions == null) {
      this.positions = new ArrayList<DocumentPosition>();
    }
    this.positions.add(positionsItem);
    return this;
  }

   /**
   * Positions of the portions of text that contributed to the selection of the category
   * @return positions
  **/
  public List<DocumentPosition> getPositions() {
    return positions;
  }

  public void setPositions(List<DocumentPosition> positions) {
    this.positions = positions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.id, category.id) &&
        Objects.equals(this.label, category.label) &&
        Objects.equals(this.hierarchy, category.hierarchy) &&
        Objects.equals(this.score, category.score) &&
        Objects.equals(this.winner, category.winner) &&
        Objects.equals(this.namespace, category.namespace) &&
        Objects.equals(this.frequency, category.frequency) &&
        Objects.equals(this.positions, category.positions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, hierarchy, score, winner, namespace, frequency, positions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    hierarchy: ").append(toIndentedString(hierarchy)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    winner: ").append(toIndentedString(winner)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    positions: ").append(toIndentedString(positions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
